name: release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Determine asset URLs for revision
        id: assets_urls
        uses: actions/github-script@0.9.0
        env:
          WORKFLOW_NAME: build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const WORKFLOW_NAME = "build";
            const DEBUG = false;

            const log = (data) => {
              DEBUG && console.log(data);
              return data
            };

            return Promise.resolve()
              .then(() => {
                console.log("Getting list of repo workflows...");
                return github.actions
                  .listRepoWorkflows({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                  })
                  .then(workflows_result => log(workflows_result.data.workflows))
              })
              .then(workflows => {
                console.log(`Searching for active workflow with name ${WORKFLOW_NAME}...`);
                let matchingWorkflowIDs = workflows
                  .filter(a => a.name === WORKFLOW_NAME && a.state === "active")
                  .map(a => a.id);

                if (matchingWorkflowIDs.length !== 1) {
                  throw `expected 1 active workflows with name '${WORKFLOW_NAME}', found ${matchingWorkflowIDs.length}`;
                }

                return matchingWorkflowIDs[0];
              })
              .then(workflowID => {
                console.log(`Looking up runs associated with workflow ID ${workflowID}...`);
                return github.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowID,
                  event: "push",
                  status: "completed"
                }).then(results => log(results.data.workflow_runs));
              })
              .then(workflow_runs => {
                console.log(`Searching through ${workflow_runs.length} workflow runs for our commit...`);
                let matchingRunIDs = workflow_runs
                  .filter(run => run.head_sha === context.sha)
                  .filter(run => run.conclusion === "success")
                  .map(log)
                  .map(run => run.id);

                if (matchingRunIDs.length === 0) {
                  throw `no successful workflow runs found for sha: '${context.sha}'`;
                }

                if (matchingRunIDs.length > 1) {
                  console.log("Found multiple matching run IDs:", matchingRunIDs);
                }

                return matchingRunIDs[0]
              })
              .then(workflowRunID => {
                console.log(`Looking up artifacts for run ID ${workflowRunID}...`);

                return github.actions.listWorkflowRunArtifacts({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: workflowRunID
                })
                  .then(result => log(result.data.artifacts))
              })
              .then(artifacts => {
                let artifactUrlForPlatform = (platform) => {
                  let artifact = artifacts.find(a => a.name.includes(platform));
                  if (!artifact) {
                    throw `unable to find artifact for '${platform}'`;
                  }
                  return artifact.archive_download_url;
                };

                return {
                  darwin: artifactUrlForPlatform("darwin"),
                  linux: artifactUrlForPlatform("linux"),
                  // windows: findForPlatform("windows"),
                }
              });
      - name: Resolved artifact URL - darwin
          id: darwin_arifact
          uses: gr2m/get-json-paths-action@v1.x
          with:
            json: ${{ steps.assets_urls.outputs.result }}
            url: "darwin"
      - name: Download artifact - darwin
        run: |
          curl -s -L \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -o pack-darwin.zip \
            ${{ steps.darwin_arifact.outputs.url }}
          unzip pack-darwin.zip -d pack-darwin
          chmod +x pack-darwin/pack
          tar -C pack-darwin -vzcf pack-darwin.tgz pack
      - name: Resolved artifact URL - linux
        id: linux_arifact
        uses: gr2m/get-json-paths-action@v1.x
        with:
          json: ${{ steps.assets_urls.outputs.result }}
          url: "linux"
      - name: Download artifact - linux
        run: |
          curl -s -L \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -o pack-linux.zip \
            ${{ steps.linux_arifact.outputs.url }}
          unzip pack-linux.zip -d pack-linux
          chmod +x pack-linux/pack
          tar -C pack-linux -vzcf pack-linux.tgz pack
#      - name: Resolved artifact URL - windows
#        id: linux_arifact
#        uses: gr2m/get-json-paths-action@v1.x
#        with:
#          json: ${{ steps.assets_urls.outputs.result }}
#          url: "linux"
#      - name: Download artifact - windows
#        run: |
#          curl -s -L \
#            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
#            -o pack-windows.zip \
#            ${{ steps.assets_urls.outputs.result.windows }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: pack ${{ github.ref }}
          draft: true
          prerelease: false
          body: |
            # pack ${{ github.ref }}
            > This is a **beta** release of the Cloud Native Buildpack local CLI. This platform implementation should be relatively stable and reliable, but breaking changes in the underlying [specification](https://github.com/buildpack/spec) may be implemented without notice. Note that pack is intended for local image builds, and thus requires a Docker daemon. The [lifecycle](https://github.com/buildpack/lifecycle) should be used directly when building on cloud platforms.

            ## Prerequisites

            - The [Docker daemon](https://www.docker.com/get-started) must be installed on your workstation or accessible over the network.

            ## Install

            If you're on macOS, you can use Homebrew:

            ```bash
            $ brew install buildpacks/tap/pack
            ```

            Otherwise:

            1. Download the `.tgz` or `.zip` file for your platform
            2. Extract the `pack` binary
            3. (Optional) Add the directory containing `pack` to `PATH`, or copy `pack` to a directory like `/usr/local/bin`

            ## Run

            Run the command `pack`.

            You should see the following output

            ```text
            // TODO: Add `pack` output 
            ```

            ## Info
            > TODO: Set lifecycle version 
            
            Builders created with this release of the pack CLI continue to contain [lifecycle v0.6.1](https://github.com/buildpack/lifecycle/releases/tag/v0.6.1) by default.

            ## Features

            ## Fixes

            ## Breaking Changes
      - name: Upload Release Asset - darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./pack-darwin.tgz
          asset_name: pack-${{ github.ref }}-darwin.tgz
          asset_content_type: application/gzip
      - name: Upload Release Asset - linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pack-linux.tgz
          asset_name: pack-${{ github.ref }}-linux.tgz
          asset_content_type: application/gzip