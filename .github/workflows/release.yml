name: release

on:
  push:
    branch:
      - 'feature/**'
#    tags:
#      # Push events to matching v*, i.e. v1.0, v20.15.10
#      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        run: |
          echo ${{ github.sha }}
      - name: Parse version
        run: echo "::set-env name=VERSION::$(echo '${{ github.ref }}' | sed 's/v*//')"
      - name: Determine asset URLs for revision
        id: assets_urls
        uses: actions/github-script@0.9.0
        env:
          WORKFLOW_NAME: build
          RELEASE_BRANCH: release/${VERSION}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            return github.actions
              .listRepoWorkflows({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
              })
              .then(workflows_result => workflows_result.data.workflows)
              .then(workflows => {
                let matchingWorkflowIDs = workflows
                  .filter(a => a.name === "${WORKFLOW_NAME}" && a.state === "active")
                  .map(a => a.id);

                if (matchingWorkflowIDs.length === 0) {
                  throw "no active workflows found with name ${WORKFLOW_NAME}"
                }

                return matchingWorkflowIDs[0]
              })
              .then(workflowID => {
                return github.actions.listRepoWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowID,
                  branch: "${RELEASE_BRANCH}",
                  event: "push",
                  status: "success"
                }).map(results => results.data.workflow_runs)
              })
              .then(workflow_runs => {
                let matchingRunIDs = workflow_runs.filter(run => run.head_sha === "${{ github.sha }}").map(run => run.id);

                if (matchingRunIDs.length === 0) {
                  throw "no successful workflow runs found for sha ${{ github.sha }}"
                }

                return matchingRunIDs[0]
              })
              .then(workflowRunID => {
                return github.actions.listWorkflowRunArtifacts({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: workflowRunID
                }).map(result => result.data.artifacts)
              })
              .then(artifacts => {
                if (artifacts.length === 0) {
                  throw "no artifacts found"
                }
            
                return artifacts
              })
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@latest
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: pack ${{ github.ref }}
#          draft: true
#          prerelease: false
#          body: |
#            # pack ${{ github.ref }}
#            > This is a **beta** release of the Cloud Native Buildpack local CLI. This platform implementation should be relatively stable and reliable, but breaking changes in the underlying [specification](https://github.com/buildpack/spec) may be implemented without notice. Note that pack is intended for local image builds, and thus requires a Docker daemon. The [lifecycle](https://github.com/buildpack/lifecycle) should be used directly when building on cloud platforms.
#
#            ## Prerequisites
#
#            - The [Docker daemon](https://www.docker.com/get-started) must be installed on your workstation or accessible over the network.
#
#            ## Install
#
#            If you're on macOS, you can use Homebrew:
#
#            ```bash
#            $ brew install buildpacks/tap/pack
#            ```
#
#            Otherwise:
#
#            1. Download the `.tgz` or `.zip` file for your platform
#            2. Extract the `pack` binary
#            3. (Optional) Add the directory containing `pack` to `PATH`, or copy `pack` to a directory like `/usr/local/bin`
#
#            ## Run
#
#            Run the command `pack`.
#
#            You should see the following output
#
#            ```
#            Usage:
#              pack [command]
#
#            Available Commands:
#              build                 Generate app image from source code
#              rebase                Rebase app image with latest run image
#              inspect-image         Show information about a built image
#              create-builder        Create builder image
#              package-buildpack     Package buildpack
#              set-run-image-mirrors Set mirrors to other repositories for a given run image
#              inspect-builder       Show information about a builder
#              set-default-builder   Set default builder used by other commands
#              suggest-builders      Display list of recommended builders
#              suggest-stacks        Display list of recommended stacks
#              version               Show current 'pack' version
#              report                Display useful information for reporting an issue
#              completion            Outputs completion script location
#              help                  Help about any command
#
#            Flags:
#              -h, --help         Help for 'pack'
#              --no-color     Disable color output
#              -q, --quiet        Show less output
#              --timestamps   Enable timestamps in output
#              -v, --verbose      Show more output
#              --version      Show current 'pack' version
#
#              Use "pack [command] --help" for more information about a command.
#            ```
#
#            ## Info
#
#            Builders created with this release of the pack CLI continue to contain [lifecycle v0.6.1](https://github.com/buildpack/lifecycle/releases/tag/v0.6.1) by default.
#
#            ## Features
#
#            ## Fixes
#
#            ## Breaking Changes
#      - name: Upload Release Asset
#        id: upload_release_assets
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} 
#          asset_path: ./my-artifact.zip
#          asset_name: my-artifact.zip
#          asset_content_type: application/zip